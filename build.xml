<?xml version="1.0" encoding="ISO-8859-1"?>

<project name="mxunit-jenkins" basedir="." default="runAllTestsLocal">
	<!-- no jenkins apontar pata o alvo runUnitTests-->

	<!--
	 Jenkins / Hudson Tips:
	 
	 If you stick with the defaults configured in "init", use the following as a guide for populating the Jenkins job configuration for this project
	 
	 1) "Test  Report XMLs" configuration will be something like 
	 
	 	DirectoryNameOfYourProject/test/testresults/xml/**/*.xml
	 	
	 2) "Archive the artifacts" configuration will be something like
	 	
	 	DirectoryNameOfYourProject/deploy/*.zip
	 
	-->

	<target name="initLocalProperties">

		<property name="application.name" value="mxunit-jenkins" />

		<property name="test.dir.name" value="tests" />

		<property name="test.dir.location" location="${test.dir.name}" />

		<property name="test.cfcpath" value="${application.name}.${test.dir.name}" />

		<property name="test.server" value="127.0.0.1" />
		<property name="test.serverport" value="8500" />
		<property name="test.runner" value="/${application.name}/${test.dir.name}/HttpAntRunner.cfc" />

		<property name="test.output" location="${test.dir.name}/testresults" />
		<property name="test.output.xml" location="${test.output}/xml" />
		<property name="test.junitoutput" location="${test.output}/html" />
		<property name="dist.dir" location="dist" />

		<property name="dist.zip" value="${application.name}.zip" />

		<property name="dist.prefixInZip" value="${application.name}" />

		<path id="project.classpath">
			<fileset dir="ant/lib">
				<include name="**/*.jar" />
			</fileset>
		</path>

		<taskdef name="mxunittask" classname="org.mxunit.ant.MXUnitAntTask" classpathref="project.classpath" />

		<echoproperties prefix="test" />
		<echoproperties prefix="dist" />
	</target>

	<target name="init">
		<property name="application.name" value="mxunit-jenkins" />
		<!-- ATENÇÃO PARA ESTE DIRETÓRIO -->
		<property name="test.dir.name" value="tests" />
		<property name="test.dir.location" location="${test.dir.name}" />
		<property name="test.cfcpath" value="${application.name}.${test.dir.name}" />
		<property name="test.server" value="192.168.16.97" />
		<property name="test.serverport" value="8305" />
		<!-- <property name="test.runner" value="/${application.name}/${test.dir.name}/HttpAntRunner.cfc" /> -->
		<!-- acontece que na pasta de jobs do Jenkins não possui um server CF pra rodar o HttpAntRunner.cfc. Assim direcionamos para o framework previamente instalado no Server de testes-->
		<property name="test.runner" value="/mxunit/runner/HttpAntRunner.cfc" />
		<!--<property name="test.runner" value="/${application.name}/${test.dir.name}/HttpAntRunner.cfc" />-->
		<property name="test.output" location="${test.dir.name}/testresults" />
		<property name="test.output.xml" location="${test.output}/xml" />
		<property name="test.junitoutput" location="${test.output}/html" />
		<!-- where the zip file for deployment will live -->
		<property name="dist.dir" location="dist" />
		<property name="dist.zip" value="${application.name}.zip" />
		<property name="dist.prefixInZip" value="${application.name}" />
		<path id="project.classpath">
			<fileset dir="ant/lib">
				<include name="**/*.jar" />
			</fileset>
		</path>

		<taskdef name="mxunittask" classname="org.mxunit.ant.MXUnitAntTask" classpathref="project.classpath"  />

	</target>

	<target name="clean" depends="init">
		<mkdir dir="${test.output.xml}" />
		<mkdir dir="${test.junitoutput}" />
		<mkdir dir="${dist.dir}" />
	</target>

	<target name="runUnitTests">
		<mkdir dir="${test.output.xml}" />
		<runTestDirectory directoryName="" excludes="null" />
		<fail if="tests.bombed" message="Existem testes com erros" />
	</target>
	<target name="runUnitTestsLocal">
		<mkdir dir="${test.output.xml}/unit" />
		<runTestDirectory directoryName="" excludes="null" />
		<fail if="tests.bombed" message="Existem testes com erros" />
	</target>


	<target name="reinitApp" depends="init">
		<!-- replace 'reset_app' with any url params you use to reset your application (e.g., init=true, etc) -->
		<property name="reinitURL" value="http://${test.server}:${test.serverport}/${application.name}/index.cfm?reset_app=true" />
		<echo message="reiniting app at ${reinitURL}" />
		<loadresource property="test.reinitAppOutput">
			<url url="${reinitURL}" />
		</loadresource>
	</target>

	<target name="runAllTestsLocal" description="Make output directories and run the MXUnit task" depends="initLocalProperties,runUnitTestsLocal,dist">
		<fail if="tests.bombed" message="Existem testes com erros" />
		<echoproperties prefix="tests" />
	</target>
	<target name="runAllTests" description="Make output directories and run the MXUnit task" depends="init,clean,copyToServerTests,runUnitTests,deleteFromServerTests,dist,homolog">
		<fail if="tests.bombed" message="Existem testes com erros" />
	</target>


	<target name="junitreport" depends="init" description="Runs the report without running the tests">
		<junitreport todir="${test.junitoutput}">
			<fileset dir="${test.output.xml}">
				<include name="*.xml" />
			</fileset>
			<report format="frames" todir="${test.junitoutput}" />
		</junitreport>
	</target>

	<target name="dist" description="Builds the zip file for deployment" depends="conditionalToCopyFiles" if="copy.them">
		<zip destfile="${dist.dir}/${dist.zip}">
			<zipfileset dir="." excludes="${test.dir.name}/, ant/, .git/, .settings/, ${dist.dir}/, .project, build.xml, settings.xml, .settings, README.md, build.properties " prefix="${dist.prefixInZip}" casesensitive="false" />
		</zip>
	</target>

	<macrodef name="runTestDirectory">
		<attribute name="directoryName" />
		<attribute name="excludes" default="" />
		<sequential>
			<mxunittask server="${test.server}" port="${test.serverport}" defaultrunner="${test.runner}" outputdir="${test.output.xml}/@{directoryName}" verbose="true" failureproperty="tests.bombed" errorproperty="tests.bombed" haltonfailure="false" haltonerror="false" >
				<directory path="${test.dir.location}/@{directoryName}" recurse="true" packageName="${test.cfcpath}.@{directoryName}" componentPath="${test.cfcpath}.@{directoryName}" excludes="@{excludes}" />
			</mxunittask>
		</sequential>
	</macrodef>

	<!--Copia os o projeto para ser testado no server de testes -->
	<target name="copyToServerTests">
		<description>Copiar arquivos para o server de testes</description>
		<echo>Copiando para o server de testes...</echo>
		<!--<chmod perm="777">
		  <fileset dir="/opt/jrun4/servers/testes/cfusion.ear/cfusion.war" />
		</chmod>-->
		<mkdir dir="/opt/jrun4/servers/testes/cfusion.ear/cfusion.war/${application.name}" description="Criar diretorio no server de testes"/>
		<copy todir="/opt/jrun4/servers/testes/cfusion.ear/cfusion.war/${application.name}/" overwrite="true" verbose="true">
			<fileset dir="/var/lib/jenkins/jobs/${application.name}/workspace/">
				<include name="**/**" />
				<exclude name=".git/**" />
				<exclude name="dist/**" />
			</fileset>
		</copy>
	</target>
	<!--Deleta o projeto que foi copiado para o server de testes -->
	<target name="deleteFromServerTests" depends="conditionalToCopyFiles" if="copy.them">
		<echo>Deletando arquivos do server de testes...</echo>
		<delete verbose="true" includeemptydirs="true">
			<fileset dir="/opt/jrun4/servers/testes/cfusion.ear/cfusion.war/${application.name}" />
		</delete> 
	</target>
	
	<!--Deploy files in CF SERVER-->
	<target name="homolog" depends="conditionalToCopyFiles" if="copy.them">
		<echo>Publicando para homologação</echo>
		<copy todir="/opt/jrun4/servers/cfusion/cfusion-ear/cfusion-war/mxunit-jenkins/" overwrite="true" verbose="true">
			<fileset dir="/var/lib/jenkins/jobs/mxunit-jenkins/workspace/">
				<include name="**/**" />
				<exclude name=".git/**" />
				<exclude name=".settings/**" />
				<exclude name="tests/**" />
				<exclude name="ant/**" />
				<exclude name="*.xml" />
				<exclude name="*.properties" />
				<exclude name="*.project" />
				<exclude name="README.md"/>
			</fileset>
		</copy>
	</target>

	<target name="conditionalToCopyFiles">
		<condition property="copy.them" value="true">
			<!--<equals arg1="${tests.bombed}" arg2="false"/>-->
			<isfalse value="${tests.bombed}" />
		</condition>
	</target>
</project>