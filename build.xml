<?xml version="1.0" encoding="ISO-8859-1"?>

<project name="mxunit-jenkins" basedir="." default="runAllTestsLocal">
	<!-- no jenkins apontar pata o almo runUnitTests-->

	<!--
	 Jenkins / Hudson Tips:
	 
	 If you stick with the defaults configured in "init", use the following as a guide for populating the Jenkins job configuration for this project
	 
	 1) "Test  Report XMLs" configuration will be something like 
	 
	 	DirectoryNameOfYourProject/test/testresults/xml/**/*.xml
	 	
	 2) "Archive the artifacts" configuration will be something like
	 	
	 	DirectoryNameOfYourProject/deploy/*.zip
	 
	-->

	<target name="initLocalProperties">

		<property name="application.name" value="mxunit-jenkins" />

		<property name="test.dir.name" value="tests" />

		<property name="test.dir.location" location="${test.dir.name}" />

		<property name="test.cfcpath" value="${application.name}.${test.dir.name}" />

		<property name="test.server" value="127.0.0.1" />
		<property name="test.serverport" value="8500" />
		<property name="test.runner" value="/${application.name}/${test.dir.name}/HttpAntRunner.cfc" />

		<property name="test.output" location="${test.dir.name}/testresults" />
		<property name="test.output.xml" location="${test.output}/xml" />
		<property name="test.junitoutput" location="${test.output}/html" />
		<property name="dist.dir" location="deploy" />

		<property name="dist.zip" value="${application.name}.zip" />

		<property name="dist.prefixInZip" value="${application.name}" />

		<path id="project.classpath">
			<fileset dir="ant/lib">
				<include name="**/*.jar" />
			</fileset>
		</path>

		<taskdef name="mxunittask" classname="org.mxunit.ant.MXUnitAntTask" classpathref="project.classpath" />

		<echoproperties prefix="test" />
		<echoproperties prefix="dist" />
	</target>

	<target name="init">
		<!-- what's the directory name of your application? this value will be used throughout this build file; if you don't want that, just replace the references to ${application.name} with your desired values -->
		<property name="application.name" value="mxunit-jenkins" />

		<!-- what's the name of the directory where your tests live? Note: this is just the name of the directory, not the full path-->
		<!-- ATENÇÃO PARA ESTE DIRETÓRIO -->
		<property name="test.dir.name" value="tests" />

		<!-- where do your tests live, relative to this build file? test.dir.location will be a full path to a directory -->
		<property name="test.dir.location" location="${test.dir.name}" />

		<!-- what is the cfc dot-notation path to that directory, as ColdFusion sees it? -->
		<property name="test.cfcpath" value="${application.name}.${test.dir.name}" />

		<!-- what server and port should your tests run against? -->
		<property name="test.server" value="http://192.168.16.97" />
		<property name="test.serverport" value="8305" />
		<!-- what "runner" URL should the tests hit. In this example, you'd be hitting http://localhost:80/DirectoryNameOfYourProject/test/HttpAntRunner.cfc  Simply copy mxunit/samples/HttpAntRunner.cfc into your test directory! -->
		<!-- <property name="test.runner" value="/${application.name}/${test.dir.name}/HttpAntRunner.cfc" /> -->
		<!-- acontece que na pasta de jobs do Jenkins não possui um server CF pra rodar o HttpAntRunner.cfc. Assim direcionamos para o framework previamente instalado no Server de testes-->
		<property name="test.runner" value="/mxunit/runner/HttpAntRunner.cfc" />
		<!--<property name="test.runner" value="/${application.name}/${test.dir.name}/HttpAntRunner.cfc" />-->

		<!-- this is where the xml and html will live for the report generator and Jenkins -->
		<property name="test.output" location="${test.dir.name}/testresults" />
		<property name="test.output.xml" location="${test.output}/xml" />
		<property name="test.junitoutput" location="${test.output}/html" />



		<!-- ////////   ZIP-FILE SETUP (used by "dist" target) -->

		<!-- where the zip file for deployment will live -->
		<property name="dist.dir" location="deploy" />

		<!-- what to call it -->
		<property name="dist.zip" value="${application.name}.zip" />

		<!-- what to start the "path" in the zip with -->
		<property name="dist.prefixInZip" value="${application.name}" />



		<!-- ////////   JAR FILES WE NEED FOR EXTERNAL TASKS -->

		<!-- where does the mxunit ant jar file live? it's easiest to copy it out of the mxunit install and put it into your app
			 You can also put any other ant-related jars in this directory; for example, if you want to use svnant, you'll need to put those jars here
		-->
		<path id="project.classpath">
			<fileset dir="ant/lib">
				<include name="**/*.jar" />
			</fileset>
		</path>

		<taskdef name="mxunittask" classname="org.mxunit.ant.MXUnitAntTask" classpathref="project.classpath" />

	</target>

	<target name="clean" depends="init">
		<mkdir dir="${test.output.xml}" />
		<mkdir dir="${test.junitoutput}" />
		<mkdir dir="${dist.dir}" />
	</target>

	<target name="runUnitTests">
		<mkdir dir="${test.output.xml}" />
		<runTestDirectory directoryName="" excludes="null" />
		<fail if="tests.bombed" message="Existem testes com erros" />
	</target>
	<target name="runUnitTestsLocal">
		<mkdir dir="${test.output.xml}/unit" />
		<runTestDirectory directoryName="" excludes="null" />
		<fail if="tests.bombed" message="Existem testes com erros" />
	</target>


	<target name="reinitApp" depends="init">
		<!-- replace 'reset_app' with any url params you use to reset your application (e.g., init=true, etc) -->
		<property name="reinitURL" value="http://${test.server}:${test.serverport}/${application.name}/index.cfm?reset_app=true" />
		<echo message="reiniting app at ${reinitURL}" />
		<loadresource property="test.reinitAppOutput">
			<url url="${reinitURL}" />
		</loadresource>
	</target>

	<target name="runAllTestsLocal" description="Make output directories and run the MXUnit task" depends="initLocalProperties,runUnitTestsLocal,dist">
		<fail if="tests.bombed" message="Existem testes com erros" />
		<echoproperties prefix="tests" />
	</target>
	<target name="runAllTests" description="Make output directories and run the MXUnit task" depends="init,clean,copyToServerTests,runUnitTests,dist">
		<fail if="tests.bombed" message="Existem testes com erros" />
	</target>


	<target name="junitreport" depends="init" description="Runs the report without running the tests">
		<junitreport todir="${test.junitoutput}">
			<fileset dir="${test.output.xml}">
				<include name="*.xml" />
			</fileset>
			<report format="frames" todir="${test.junitoutput}" />
		</junitreport>
	</target>

	<target name="dist" depends="init" description="Builds the zip file for deployment">
		<zip destfile="${dist.dir}/${dist.zip}">
			<zipfileset dir="." excludes="${test.dir.name}/, deploy/, lib/, .apptacular/, .project, build.xml, settings.xml, .settings" prefix="${dist.prefixInZip}" casesensitive="false" />
		</zip>
	</target>

	<macrodef name="runTestDirectory">
		<attribute name="directoryName" />
		<attribute name="excludes" default="" />
		<sequential>
			<mxunittask server="${test.server}" port="${test.serverport}" defaultrunner="${test.runner}" outputdir="${test.output.xml}/@{directoryName}" verbose="true" failureproperty="tests.bombed" errorproperty="tests.bombed" haltonfailure="false" haltonerror="false">
				<directory path="${test.dir.location}/@{directoryName}" recurse="true" packageName="${test.cfcpath}.@{directoryName}" componentPath="${test.cfcpath}.@{directoryName}" excludes="@{excludes}" />
			</mxunittask>
		</sequential>
	</macrodef>

	<!--Copia os o projeto para ser testado no server de testes -->
	<target name="copyToServerTests">
		<description>Copiar arquivos para o server de testes</description>
		<echo>Copiando para o server de testes...</echo>
		<mkdir dir="/opt/jrun4/servers/testes/cfusion.ear/cfusion.war/${application.name}/" />
		<copy todir="/opt/jrun4/servers/testes/cfusion.ear/cfusion.war/${application.name}/" overwrite="true">
			<fileset dir="/var/lib/jenkins/jobs/${application.name}/workspace/">
				<include name="**/**" />
				<exclude name=".git/**" />
				<exclude name=".settings/**" />
			</fileset>
		</copy>
	</target>
	<!--Copy files-->
	<target name="copy" depends="conditionalToCopyFiles" if="copy.them">

		<description>Copiando..</description>
		<copy todir="/opt/jrun4/servers/cfusion/cfusion-ear/cfusion-war/mxunit-jenkins/" overwrite="true">
			<fileset dir="/var/lib/jenkins/jobs/mxunit-jenkins/workspace/">
				<include name="**/**" />
				<exclude name=".git/**" />
				<exclude name=".settings/**" />
			</fileset>
		</copy>
	</target>

	<!--Deploy files in CF SERVER-->
	<target name="deploy" depends="conditionalToCopyFiles" if="copy.them">

		<description>Deploying...</description>
		<copy todir="/opt/jrun4/servers/cfusion/cfusion-ear/cfusion-war/mxunit-jenkins/" overwrite="true">
			<fileset dir="/var/lib/jenkins/jobs/mxunit-jenkins/workspace/">
				<include name="**/**" />
				<exclude name=".git/**" />
				<exclude name=".settings/**" />
				<exclude name="tests/**" />
				<exclude name="ant/**" />
				<exclude name="*.xml" />
				<exclude name="*.properties" />
			</fileset>
		</copy>
	</target>

	<target name="conditionalToCopyFiles">
		<condition property="copy.them" value="true">
			<!--<equals arg1="${tests.bombed}" arg2="false"/>-->
			<isfalse value="${tests.bombed}" />
		</condition>
	</target>

</project>